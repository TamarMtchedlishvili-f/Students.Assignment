@page "/Student"
@using Students.Assignment.Shared.People

@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper

<h1>Students 👨🏼‍🎓</h1>

@* <p>სტუდენტები! 😲</p> *@

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Add" Click="@InsertRow"/>
<RadzenDataGrid @ref=StudentsGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true"
                EditMode="DataGridEditMode.Single" Data="@Students" TItem="Student" ColumnWidth="100px" LogicalFilterOperator="LogicalFilterOperator.Or" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="Student" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="70px" TextAlign="TextAlign.Center"/>

        @* ეს არის იმ ველების სია, რაც ჩანს ლისთვიუზე *@
        <RadzenDataGridColumn TItem="Student" Property="IDNumber" Title="ID number"/>
        <RadzenDataGridColumn TItem="Student" Property="FirstName" Title="First Name"/>
        <RadzenDataGridColumn TItem="Student" Property="LastName" Title="Last Name" Width="150px"/>
        <RadzenDataGridColumn TItem="Student" Property="DateOfBirth" Title="DateOfBirth"/>
        <RadzenDataGridColumn TItem="Student" Property="Gender" Title="Gender"/>
        <RadzenDataGridColumn TItem="Student" Property="Course" Title="Course"/>
        <RadzenDataGridColumn TItem="Student" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="order">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Student" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<Student> StudentsGrid;

    Student[] Students { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Students = await client.GetFromJsonAsync<Student[]>("api/student");
    }

    async Task SaveRow(Student student)
    {
        await StudentsGrid.UpdateRow(student);
    }

    async Task DeleteRow(Student student)
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {student.FirstName}'s ({student.Id}) Record?"))
        {
            await client.DeleteAsync($"api/student/{student.Id}");
            await OnInitializedAsync();
        }
    }

    void CancelEdit(Student student)
    {
        StudentsGrid.CancelEditRow(student);
    }

    async Task InsertRow()
    {
        uriHelper.NavigateTo($"student/create");
    }

    void EditRow(Student order)
    {
        uriHelper.NavigateTo($"student/edit/{order.Id}");
    }

    async Task OnCreateRow(Student student)
    {
        await client.PostAsJsonAsync("api/student", student);
    }

    async Task OnUpdateRow(Student student)
    {
        await client.PutAsJsonAsync("api/student", student);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("student");
    }

    async Task Delete(int studentId)
    {
        var student = Students.First(x => x.Id == studentId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {student.FirstName}'s ({student.Id}) Record?"))
        {
            await client.DeleteAsync($"api/student/{studentId}");
            await OnInitializedAsync();
        }
    }

}