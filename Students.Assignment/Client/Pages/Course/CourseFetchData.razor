@page "/Course2"
@using Students.Assignment.Shared.Courses
@inject HttpClient client
@inject IJSRuntime js

<h3>Courses</h3>
<small>Add as many Courses as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="Course/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (Courses == null)
{
    <text>Loading...</text>
}
else if (Courses.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Course Name</th>
            <th>Credit</th>
            <th>Course Type</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (Course course in Courses)
        {
            <tr>
                <td>@course.Id</td>
                <td>@course.CourseName</td>
                <td>@course.Credit</td>
                <td>@course.CourseType</td>
                <td>
                    <a class="btn btn-success" href="Course/edit/@course.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(course.Id))">Delete</button>
                </td>
            </tr>
        }

        </tbody>
    </table>
}

@code {
    Course[] Courses { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Courses = await client.GetFromJsonAsync<Course[]>("api/Course");
    }

    async Task Delete(int courseId)
    {
        var course = Courses.First(x => x.Id == courseId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {course.CourseName}'s ({course.Id}) Record?"))
        {
            await client.DeleteAsync($"api/Course/{courseId}");
            await OnInitializedAsync();
        }
    }

}